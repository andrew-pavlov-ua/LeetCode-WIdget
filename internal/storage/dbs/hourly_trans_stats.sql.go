// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: hourly_trans_stats.sql

package dbs

import (
	"context"
	"time"
)

const profileHourlyViewsStats = `-- name: ProfileHourlyViewsStats :one
SELECT COALESCE(SUM(count) FILTER ( WHERE time >= $1 ), 0)::BIGINT  AS day_count,
       COALESCE(SUM(count) FILTER ( WHERE time >= $2 ), 0)::BIGINT AS week_count,
       SUM(count)                                                     AS month_count
FROM profile_hourly_visits_stats
WHERE user_slug = $3
  AND time >= $4
GROUP BY user_slug
`

type ProfileHourlyViewsStatsParams struct {
	Day      time.Time
	Week     time.Time
	UserSlug string
	Month    time.Time
}

type ProfileHourlyViewsStatsRow struct {
	DayCount   int64
	WeekCount  int64
	MonthCount int64
}

func (q *Queries) ProfileHourlyViewsStats(ctx context.Context, arg ProfileHourlyViewsStatsParams) (ProfileHourlyViewsStatsRow, error) {
	row := q.queryRow(ctx, q.profileHourlyViewsStatsStmt, profileHourlyViewsStats,
		arg.Day,
		arg.Week,
		arg.UserSlug,
		arg.Month,
	)
	var i ProfileHourlyViewsStatsRow
	err := row.Scan(&i.DayCount, &i.WeekCount, &i.MonthCount)
	return i, err
}

const profileHourlyVisitsStatsUpsert = `-- name: ProfileHourlyVisitsStatsUpsert :exec
INSERT INTO profile_hourly_visits_stats (user_slug, time, count)
VALUES ($1, $2, $3)
ON CONFLICT (user_slug, time) DO UPDATE
    SET count = profile_hourly_visits_stats.count + $3
`

type ProfileHourlyVisitsStatsUpsertParams struct {
	UserSlug string
	Time     time.Time
	Count    int64
}

func (q *Queries) ProfileHourlyVisitsStatsUpsert(ctx context.Context, arg ProfileHourlyVisitsStatsUpsertParams) error {
	_, err := q.exec(ctx, q.profileHourlyVisitsStatsUpsertStmt, profileHourlyVisitsStatsUpsert, arg.UserSlug, arg.Time, arg.Count)
	return err
}

const profileVisitsStatsByPeriod = `-- name: ProfileVisitsStatsByPeriod :one
SELECT COALESCE(SUM(count), 0)::BIGINT as count
FROM profile_hourly_visits_stats
WHERE user_slug = $1
    AND time >= $2
`

type ProfileVisitsStatsByPeriodParams struct {
	UserSlug  string
	StartTime time.Time
}

func (q *Queries) ProfileVisitsStatsByPeriod(ctx context.Context, arg ProfileVisitsStatsByPeriodParams) (int64, error) {
	row := q.queryRow(ctx, q.profileVisitsStatsByPeriodStmt, profileVisitsStatsByPeriod, arg.UserSlug, arg.StartTime)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const totalCount = `-- name: TotalCount :one
SELECT COALESCE(SUM(count), 0)::BIGINT as count 
FROM profile_hourly_visits_stats 
WHERE user_slug = $1
`

func (q *Queries) TotalCount(ctx context.Context, userSlug string) (int64, error) {
	row := q.queryRow(ctx, q.totalCountStmt, totalCount, userSlug)
	var count int64
	err := row.Scan(&count)
	return count, err
}
