// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package dbs

import (
	"context"
	"database/sql"
	"time"
)

const insertStatsInfo = `-- name: InsertStatsInfo :exec
INSERT INTO lc_stats (user_id, easy_submits, medium_submits, hard_submits, total_submits, created_at, updated_at)
       VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type InsertStatsInfoParams struct {
	UserID        int64
	EasySubmits   sql.NullInt32
	MediumSubmits sql.NullInt32
	HardSubmits   sql.NullInt32
	TotalSubmits  sql.NullInt32
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) InsertStatsInfo(ctx context.Context, arg InsertStatsInfoParams) error {
	_, err := q.exec(ctx, q.insertStatsInfoStmt, insertStatsInfo,
		arg.UserID,
		arg.EasySubmits,
		arg.MediumSubmits,
		arg.HardSubmits,
		arg.TotalSubmits,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const userNewAndParse = `-- name: UserNewAndParse :one
INSERT INTO users (social_provider_user_id, username)
    VALUES ($1, $2)
RETURNING id
`

type UserNewAndParseParams struct {
	SocialProviderUserID string
	Username             string
}

func (q *Queries) UserNewAndParse(ctx context.Context, arg UserNewAndParseParams) (int64, error) {
	row := q.queryRow(ctx, q.userNewAndParseStmt, userNewAndParse, arg.SocialProviderUserID, arg.Username)
	var id int64
	err := row.Scan(&id)
	return id, err
}
