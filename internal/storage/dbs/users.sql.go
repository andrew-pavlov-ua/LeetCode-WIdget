// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package dbs

import (
	"context"
	"time"
)

const insertStatsInfo = `-- name: InsertStatsInfo :exec
INSERT INTO lc_stats (user_slug, username, easy_submits, medium_submits, hard_submits, total_submits, rank, created_at, updated_at)
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type InsertStatsInfoParams struct {
	UserSlug      string
	Username      string
	EasySubmits   int64
	MediumSubmits int64
	HardSubmits   int64
	TotalSubmits  int64
	Rank          int64
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) InsertStatsInfo(ctx context.Context, arg InsertStatsInfoParams) error {
	_, err := q.exec(ctx, q.insertStatsInfoStmt, insertStatsInfo,
		arg.UserSlug,
		arg.Username,
		arg.EasySubmits,
		arg.MediumSubmits,
		arg.HardSubmits,
		arg.TotalSubmits,
		arg.Rank,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const updateLcStats = `-- name: UpdateLcStats :exec
UPDATE lc_stats
SET easy_submits = $1,
    medium_submits = $2,
    hard_submits = $3,
    total_submits = $4,
    updated_at = $5
WHERE user_slug = $6
`

type UpdateLcStatsParams struct {
	EasySubmits   int64
	MediumSubmits int64
	HardSubmits   int64
	TotalSubmits  int64
	UpdatedAt     time.Time
	UserSlug      string
}

func (q *Queries) UpdateLcStats(ctx context.Context, arg UpdateLcStatsParams) error {
	_, err := q.exec(ctx, q.updateLcStatsStmt, updateLcStats,
		arg.EasySubmits,
		arg.MediumSubmits,
		arg.HardSubmits,
		arg.TotalSubmits,
		arg.UpdatedAt,
		arg.UserSlug,
	)
	return err
}

const userGetStatsBySlug = `-- name: UserGetStatsBySlug :one
SELECT user_slug,
       username,
       easy_submits,
       medium_submits,
       hard_submits,
       total_submits,
       rank,
       updated_at
FROM lc_stats
WHERE user_slug = $1
`

type UserGetStatsBySlugRow struct {
	UserSlug      string
	Username      string
	EasySubmits   int64
	MediumSubmits int64
	HardSubmits   int64
	TotalSubmits  int64
	Rank          int64
	UpdatedAt     time.Time
}

func (q *Queries) UserGetStatsBySlug(ctx context.Context, userSlug string) (UserGetStatsBySlugRow, error) {
	row := q.queryRow(ctx, q.userGetStatsBySlugStmt, userGetStatsBySlug, userSlug)
	var i UserGetStatsBySlugRow
	err := row.Scan(
		&i.UserSlug,
		&i.Username,
		&i.EasySubmits,
		&i.MediumSubmits,
		&i.HardSubmits,
		&i.TotalSubmits,
		&i.Rank,
		&i.UpdatedAt,
	)
	return i, err
}
